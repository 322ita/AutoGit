name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    - name: Verify build outputs
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "Bin directory contents (Linux):"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/bin"
          echo "Lib directory contents (Linux):"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/lib" || true
        else
          echo "Writing Windows verification script..."
          powershell -Command "& {
            Write-Output 'Bin directory contents (Windows):'
            if (Test-Path '${{ steps.strings.outputs.build-output-dir }}\bin') {
              Get-ChildItem -Path '${{ steps.strings.outputs.build-output-dir }}\bin' -Force
            } else {
              Write-Output 'Bin directory not found!'
            }
            Write-Output 'Lib directory contents (Windows):'
            if (Test-Path '${{ steps.strings.outputs.build-output-dir }}\lib') {
              Get-ChildItem -Path '${{ steps.strings.outputs.build-output-dir }}\lib' -Force
            } else {
              Write-Output 'Lib directory not found (no libraries generated)'
            }
          }"
        fi
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ github.run_id }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/bin/*
          ${{ steps.strings.outputs.build-output-dir }}/lib/*      
        if-no-files-found: ignore  # Cambiato da warn a ignore
        overwrite: true